// <auto-generated />
using System;
using A_FGMS.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace A_FGMS.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230413010159_Deployment Seeders")]
    partial class DeploymentSeeders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Incident")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Initial")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Address", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.AnnualCheck", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime?>("CarInsuranceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CovidSouDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmergencyBeneficiaryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HippaReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PhotoReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PhysicalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("AnnualChecks");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Assignment", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("ClassroomTuid")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Schedule")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("ClassroomTuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.AssignmentStudent", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("AssignmentTuid")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("DesiredOutcome")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("StudentTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("AssignmentTuid");

                    b.HasIndex("StudentTuid");

                    b.ToTable("AssignmentStudents");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Classroom", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("ClassroomNumber")
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("ClassroomSize")
                        .HasColumnType("int");

                    b.Property<string>("GradeLevel")
                        .HasColumnType("varchar(45)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolTuid")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.HasIndex("SchoolTuid");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ConditionItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Tuid");

                    b.ToTable("ConditionItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Acronym = "AD",
                            Description = "Attention Difficulties"
                        },
                        new
                        {
                            Tuid = 2,
                            Acronym = "AN",
                            Description = "Abused or Neglected"
                        },
                        new
                        {
                            Tuid = 3,
                            Acronym = "CI",
                            Description = "Child of Incarcerated Parent"
                        },
                        new
                        {
                            Tuid = 4,
                            Acronym = "CH",
                            Description = "Homeless or Recently Displaced"
                        },
                        new
                        {
                            Tuid = 5,
                            Acronym = "DD",
                            Description = "Developmental Disibilities"
                        },
                        new
                        {
                            Tuid = 6,
                            Acronym = "ES",
                            Description = "Emotional / Social Difficulties"
                        },
                        new
                        {
                            Tuid = 7,
                            Acronym = "HS",
                            Description = "Behavior / Social Difficulties"
                        },
                        new
                        {
                            Tuid = 8,
                            Acronym = "LB",
                            Description = "Language / Literacy Barriers"
                        },
                        new
                        {
                            Tuid = 9,
                            Acronym = "LD",
                            Description = "Learning Disabilities"
                        },
                        new
                        {
                            Tuid = 10,
                            Acronym = "PD",
                            Description = "Physical Disabilities"
                        },
                        new
                        {
                            Tuid = 11,
                            Acronym = "SP",
                            Description = "Speech Impaired"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.DonationTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("DonationTypeItems");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.EthnicityTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("EthnicityTypeItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Name = "Hispanic"
                        },
                        new
                        {
                            Tuid = 2,
                            Name = "Non-Hispanic"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ExpenseTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("ExpenseTypeItems");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.GenderTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("GenderTypeItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Name = "Female"
                        },
                        new
                        {
                            Tuid = 2,
                            Name = "Male"
                        },
                        new
                        {
                            Tuid = 3,
                            Name = "Transgender"
                        },
                        new
                        {
                            Tuid = 4,
                            Name = "Non-binary/non-conforming"
                        },
                        new
                        {
                            Tuid = 5,
                            Name = "Prefer not to respond"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.GrantStipend", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StartValue")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Tuid");

                    b.ToTable("GrantStipends");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.IdentifiesAsTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("IdentifiesAsTypeItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Name = "Woman"
                        },
                        new
                        {
                            Tuid = 2,
                            Name = "Man"
                        },
                        new
                        {
                            Tuid = 3,
                            Name = "Non-binary"
                        },
                        new
                        {
                            Tuid = 4,
                            Name = "Undeclared"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InactiveStatusTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("InactiveStatusTypeItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Name = "Moved"
                        },
                        new
                        {
                            Tuid = 2,
                            Name = "Terminated"
                        },
                        new
                        {
                            Tuid = 3,
                            Name = "Resigned/Health"
                        },
                        new
                        {
                            Tuid = 4,
                            Name = "Resigned/New Work or Interests"
                        },
                        new
                        {
                            Tuid = 5,
                            Name = "Resigned/Other"
                        },
                        new
                        {
                            Tuid = 6,
                            Name = "Deceased"
                        },
                        new
                        {
                            Tuid = 7,
                            Name = "Transferred"
                        },
                        new
                        {
                            Tuid = 8,
                            Name = "Retired"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindDonationTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DonationTypeItemTuid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Tuid");

                    b.HasIndex("DonationTypeItemTuid");

                    b.ToTable("InKindDonationTypeItems");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindExpense", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeTuid")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("ExpenseTypeTuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("InKindExpenses");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindExpenseTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeItemTuid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(45)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Tuid");

                    b.HasIndex("ExpenseTypeItemTuid");

                    b.ToTable("InKindExpenseTypeItems");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.MealMileage", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("BusRideCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Mileage")
                        .HasColumnType("decimal(16,2)");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("MealMileages");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.MealTransportRate", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<double>("BusMileageRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("MealRate")
                        .HasColumnType("float");

                    b.Property<double>("MileageRate")
                        .HasColumnType("float");

                    b.HasKey("Tuid");

                    b.ToTable("MealTransportRates");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.OneTimeCheck", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime?>("AliasFingerprintDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfidenceSouDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DhsDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FieldPrintDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBackgroundCheck")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFilePhoto")
                        .HasColumnType("bit");

                    b.Property<bool>("HasIdCopy")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNschc")
                        .HasColumnType("bit");

                    b.Property<bool>("HasServiceDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTrainingSheet")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IChatDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NsopwDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ServiceStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TbShotDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TrueScreenDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("OneTimeChecks");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.PTOStipend", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPTOEligible")
                        .HasColumnType("bit");

                    b.Property<decimal>("PtoEarned")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("PtoEnd")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("PtoStart")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("PtoUsed")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("RegularHours")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("StipendPaid")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.Property<decimal>("YearToDateHour")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("Tuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("PTOStipends");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.PTOStipendRate", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("PTORate")
                        .HasColumnType("float");

                    b.Property<double>("StipendRate")
                        .HasColumnType("float");

                    b.HasKey("Tuid");

                    b.ToTable("PTOStipendRates");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.RacialGroupTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.HasKey("Tuid");

                    b.ToTable("RacialGroupTypeItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Tuid = 2,
                            Name = "White"
                        },
                        new
                        {
                            Tuid = 3,
                            Name = "Asian"
                        },
                        new
                        {
                            Tuid = 4,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ReasonSeparated", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InactiveStatusTypeItemTuid")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("InactiveStatusTypeItemTuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("ReasonsSeparated");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ReportPreset", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("Current")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("Former")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("Inactive")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Preset")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SortBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Tuid");

                    b.ToTable("ReportPresets");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.School", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int?>("AddressTuid")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Secretary")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.HasKey("Tuid");

                    b.HasIndex("AddressTuid");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.SchoolCostShare", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Tuid");

                    b.ToTable("SchoolCostShares");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Student", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Identifier")
                        .HasColumnType("varchar(45)");

                    b.Property<bool?>("IsAge5To12")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAgeBirthTo5")
                        .HasColumnType("bit");

                    b.HasKey("Tuid");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.StudentCondition", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("ConditionItemTuid")
                        .HasColumnType("int");

                    b.Property<int>("StudentTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("ConditionItemTuid");

                    b.HasIndex("StudentTuid");

                    b.ToTable("StudentConditions");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.StudentNeed", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("StudentNeedItemTuid")
                        .HasColumnType("int");

                    b.Property<int>("StudentTuid")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.HasIndex("StudentNeedItemTuid");

                    b.HasIndex("StudentTuid");

                    b.ToTable("StudentNeeds");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.StudentNeedItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Tuid");

                    b.ToTable("StudentNeedItems");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Acronym = "A",
                            Description = "Nurturing / Comfort"
                        },
                        new
                        {
                            Tuid = 2,
                            Acronym = "B",
                            Description = "Social Skilles"
                        },
                        new
                        {
                            Tuid = 3,
                            Acronym = "C",
                            Description = "Communication Skills"
                        },
                        new
                        {
                            Tuid = 4,
                            Acronym = "D",
                            Description = "Reading"
                        },
                        new
                        {
                            Tuid = 5,
                            Acronym = "E",
                            Description = "Help with Letter Identification"
                        },
                        new
                        {
                            Tuid = 6,
                            Acronym = "F",
                            Description = "Positive Reinforcement / Redirection"
                        },
                        new
                        {
                            Tuid = 7,
                            Acronym = "G",
                            Description = "Conversion Skills"
                        },
                        new
                        {
                            Tuid = 8,
                            Acronym = "H",
                            Description = "Help with Numeracy Skills"
                        },
                        new
                        {
                            Tuid = 9,
                            Acronym = "I",
                            Description = "Assist with Cognitive Activities"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.TempInfoEntry", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int>("TempInfoTypeItemTuid")
                        .HasColumnType("int");

                    b.Property<int>("VolunteerTuid")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Tuid");

                    b.HasIndex("TempInfoTypeItemTuid");

                    b.HasIndex("VolunteerTuid");

                    b.ToTable("TempInfoEntries");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.TempInfoTypeItem", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("TempInfoType")
                        .HasColumnType("int");

                    b.HasKey("Tuid");

                    b.ToTable("TempInfoTypeItems");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Tuid");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Tuid = 1,
                            Email = "svsu.developer@svsu.edu",
                            HashedPassword = "AAAAAAIAAYagAAAAEOzgQmjJNUK60RAtv8EeQmEZ3q++aBgIhrVLdpHk6ywewdwf5U5eFiVPnK242weLOw==",
                            IsActive = true,
                            IsAdmin = true,
                            IsDeleted = false,
                            IsReadOnly = true,
                            Name = "SVSU Developer",
                            PhoneNumber = "(989) 964-4000"
                        });
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Volunteer", b =>
                {
                    b.Property<int>("Tuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tuid"), 1L, 1);

                    b.Property<int?>("AddressTuid")
                        .HasColumnType("int");

                    b.Property<string>("AltPhone")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("EthnicityTuid")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("GenderTuid")
                        .HasColumnType("int");

                    b.Property<int>("IdentifiesAsTuid")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamilyOfMilitary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeteran")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(45)");

                    b.Property<int>("RacialGroupTuid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeparatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Tuid");

                    b.HasIndex("AddressTuid");

                    b.HasIndex("EthnicityTuid");

                    b.HasIndex("GenderTuid");

                    b.HasIndex("IdentifiesAsTuid");

                    b.HasIndex("RacialGroupTuid");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ActivityLog", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.AnnualCheck", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Assignment", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.AssignmentStudent", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Classroom", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindDonationTypeItem", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.DonationTypeItem", "DonationTypeItem")
                        .WithMany()
                        .HasForeignKey("DonationTypeItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DonationTypeItem");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindExpense", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.ExpenseTypeItem", "ExpenseTypeItem")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseTypeItem");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.InKindExpenseTypeItem", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.ExpenseTypeItem", "ExpenseTypeItem")
                        .WithMany()
                        .HasForeignKey("ExpenseTypeItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseTypeItem");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.MealMileage", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.OneTimeCheck", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.PTOStipend", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.ReasonSeparated", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.InactiveStatusTypeItem", "InactiveStatusTypeItem")
                        .WithMany()
                        .HasForeignKey("InactiveStatusTypeItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany("ReasonsSeparated")
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InactiveStatusTypeItem");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.School", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.StudentCondition", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.ConditionItem", "ConditionItem")
                        .WithMany()
                        .HasForeignKey("ConditionItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConditionItem");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.StudentNeed", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.StudentNeedItem", "StudentNeedItem")
                        .WithMany()
                        .HasForeignKey("StudentNeedItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentNeedItem");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.TempInfoEntry", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.TempInfoTypeItem", "TempInfoType")
                        .WithMany()
                        .HasForeignKey("TempInfoTypeItemTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TempInfoType");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Volunteer", b =>
                {
                    b.HasOne("A_FGMS.DataLayer.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressTuid");

                    b.HasOne("A_FGMS.DataLayer.Entities.EthnicityTypeItem", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.GenderTypeItem", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.IdentifiesAsTypeItem", "IdentifiesAs")
                        .WithMany()
                        .HasForeignKey("IdentifiesAsTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_FGMS.DataLayer.Entities.RacialGroupTypeItem", "RacialGroup")
                        .WithMany()
                        .HasForeignKey("RacialGroupTuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Ethnicity");

                    b.Navigation("Gender");

                    b.Navigation("IdentifiesAs");

                    b.Navigation("RacialGroup");
                });

            modelBuilder.Entity("A_FGMS.DataLayer.Entities.Volunteer", b =>
                {
                    b.Navigation("ReasonsSeparated");
                });
#pragma warning restore 612, 618
        }
    }
}
